// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


//Commands to do after adding a modal
// 1. npx prisma generate
// 2. npx prisma db push
// * if want to reset the database [npx prisma migrate reset] after push the changes [npx prisma db push]


datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
  
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum UserRole {
  ADMIN
  USER
}


model Board{
  id            String @id @default(uuid())
  orgId         String
  title         String
  imageID       String
  imageThumbUrl String @db.Text
  imageFullUrl  String @db.Text
  imageUserName String @db.Text
  imageLinkHTML String @db.Text

  lists         List[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model List {
  id            String @id @default(uuid())
  title         String
  order         Int

  boardId       String
  board         Board @relation(fields: [boardId],references: [id],onDelete: Cascade)
  
  cards         Card[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([boardId])
}

model Card {
  id            String @id @default(uuid())
  title         String
  order         Int
  description   String? @db.Text

  listId       String
  list         List @relation(fields: [listId],references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([listId])
}

enum ACTION {
  CREATE
  DELETE
  UPDATE

}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

model AuditLog {
  id          String @id @default(uuid())
  orgId       String
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String @db.Text
  userName    String @db.Text

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrgLimit {
  id         String @id @default(uuid())
  orgId      String @unique
  count      Int @default(0)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model OrgSubscription{
  id                     String @id @default(uuid())
  orgId                  String @unique

  stripeCustomerId       String? @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String? @unique @map(name: "stripe_subscription_id")
  stripePriceId          String @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}